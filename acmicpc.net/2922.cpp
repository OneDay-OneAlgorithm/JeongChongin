#include <bits/stdc++.h>
using namespace std;
using ll=long long;
ll dp[101][3][3][2];
//dp[i][j1][j2][k] : i번째 단어에 모음 연속 j1번, 
// 자음 연속 j2번, L 포함 여부 k일 때 만들 수 있는 경우의 수
int main(){
    string str;
    cin>>str;
    int N = str.size();
    if(str[0]=='L'){
        dp[1][0][1][1]=1;
    }
    else if(str[0]=='A' || str[0]=='E' || str[0]=='I' || str[0]=='O' || str[0]=='U'){
        dp[1][1][0][0]=1;
    }
    else if(str[0]=='_'){
        dp[1][1][0][0]=5;
        dp[1][0][1][0]=20;
        dp[1][0][1][1]=1;

    }
    else{
        dp[1][0][1][0]=1;
    }
    for(int i=2; i<=N; ++i){
        char c = str[i-1];
        if(c=='_'){
            // 모음을 넣는 경우 : *5
            dp[i][1][0][0]+=(dp[i-1][0][1][0]+dp[i-1][0][2][0])*5;
            dp[i][2][0][0]+=(dp[i-1][1][0][0])*5;
            dp[i][1][0][1]+=(dp[i-1][0][1][1]+dp[i-1][0][2][1])*5;
            dp[i][2][0][1]+=(dp[i-1][1][0][1])*5;
            // 자음을 넣는 경우 (L 제외) : *20
            dp[i][0][1][0]+=(dp[i-1][1][0][0]+dp[i-1][2][0][0])*20;
            dp[i][0][2][0]+=(dp[i-1][0][1][0])*20;
            dp[i][0][1][1]+=(dp[i-1][1][0][1]+dp[i-1][2][0][1])*20;
            dp[i][0][2][1]+=(dp[i-1][0][1][1])*20;
            // L을 넣는 경우
            dp[i][0][1][1]+=dp[i-1][1][0][0]+dp[i-1][2][0][0]+dp[i-1][1][0][1]+dp[i-1][2][0][1];
            dp[i][0][2][1]+=dp[i-1][0][1][0]+dp[i-1][0][1][1];
        }
        else if(c=='A' || c=='E' || c=='I' || c=='O' || c=='U'){
            dp[i][1][0][0]+=dp[i-1][0][1][0]+dp[i-1][0][2][0];
            dp[i][2][0][0]+=dp[i-1][1][0][0];
            dp[i][1][0][1]+=dp[i-1][0][1][1]+dp[i-1][0][2][1];
            dp[i][2][0][1]+=dp[i-1][1][0][1];
        }
        else if(c=='L'){
            dp[i][0][1][1]+=dp[i-1][1][0][0]+dp[i-1][2][0][0]+dp[i-1][1][0][1]+dp[i-1][2][0][1];
            dp[i][0][2][1]+=dp[i-1][0][1][0]+dp[i-1][0][1][1];
        }
        else {
            dp[i][0][1][0]+=dp[i-1][1][0][0]+dp[i-1][2][0][0];
            dp[i][0][2][0]+=dp[i-1][0][1][0];
            dp[i][0][1][1]+=dp[i-1][1][0][1]+dp[i-1][2][0][1];
            dp[i][0][2][1]+=dp[i-1][0][1][1];
        }
        // for(int j1=1; j1<3; ++j1){
        //     cout << "dp["<<i<<"]["<<j1<<"][0][0]="<<dp[i][j1][0][0]<<'\n';
        //     cout << "dp["<<i<<"]["<<j1<<"][0][1]="<<dp[i][j1][0][1]<<'\n';
        // }
        // for(int j2=1; j2<3; ++j2){
        //     cout << "dp["<<i<<"][0]["<<j2<<"][0]="<<dp[i][0][j2][0]<<'\n';
        //     cout << "dp["<<i<<"][0]["<<j2<<"][1]="<<dp[i][0][j2][1]<<'\n';
        // }
    }
    ll sum=0;
    for(int j1=1; j1<3; ++j1){
        sum+=dp[N][j1][0][1];
    }
    for(int j2=1; j2<3; ++j2){
        sum+=dp[N][0][j2][1];
    }
    cout << sum << '\n';
}